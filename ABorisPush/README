Skeleton 2-1/2D Electromagnetic Particle-in-Cell (PIC) codes
by Viktor K. Decyk
copyright 1999-2013, regents of the university of california

This program contains sample codes for illustrating the basic structure
of a 2-1/2D Electromagnetic Particle-in-Cell (PIC) code, both in Fortran
and in Python with a Fortran library.  The codes have no diagnosics 
except for initial and final energies.  Their primary purpose is to
provide example codes for physical science students learning about PIC
codes.  They are also intended as benchmark reference codes to aid in
developing new codes and in evaluating new  computer architectures.

PIC codes are widely used in plasma physics.  They model plasmas as
particles which interact self-consistently via the electromagnetic
fields they themselves produce.  PIC codes generally have three
important procedures in the main iteration loop.  The first is the
deposit, where some particle quantity, such as a charge, is accumulated
on a grid via interpolation to produce a source density.  The second
important procedure is the field solver, which solves Maxwell’s equation
or a subset to obtain the electric and/or magnetic fields from the
source densities.  Finally, once the fields are obtained, the particle
forces are found by interpolation from the grid, and the particle
co-ordinates are updated, using Newton’s second law and the Lorentz
force.  The particle processing parts dominate over the field solving
parts in a typical PIC application. 

More details about PIC codes can be found in the texts by C. K. Birdsall
and A. B. Langdon, Plasma Physics via Computer Simulation, 1985,
R. W. Hockney and J. W. Eastwood, Computer Simulation Using Particles,
1981, and John M. Dawson, "Particle simulation of plasmas", Rev. Mod.
Phys. 55, 403 (1983).  Details about the mathematical equations and
units used in this code is given in the companion article,
"Description of Electromagnetic Spectral Code from the UPIC Framework"
by Viktor K. Decyk, UCLA, in the file EMModels.pdf.

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

The code here uses the complete electromagnetic interaction, obtained by
solving Maxwell's equation.  A spectral method using Fast Fourier
Transforms (FFTs) is used to solve the Maxwell and Poisson equations.  A
real to complex FFT is used, and the data in Fourier space is stored in
a packed format, where the input and output sizes are the same.  The
boundary conditions are periodic, only electron species are included,
and linear interpolation is used.

Particles are initialized with a uniform distribution in space and a
gaussian distribution in velocity space.  This describes a plasma in
thermal equilibrium.  The inner loop contains a current and charge
deposit, add guard cell procedures, a vector and scalar FFT, a
transverse current procedure, Maxwell and Poisson solvers, vector FFTs,
copy guard cell procedures, a particle push, and a particle sorting
procedure.  The final energy and timings are printed.  A sample output
file for the default input parameters is included in the file output.

In more detail, the inner loop of the code contains the following
procedures in Fortran (C):

Deposit section:
   wgrjpost2: relativistic current deposit, and update position:
              x(t+dt/2)->x(t+dt)
   wgjpost2: deposit current density, and update position:
             x(t+dt/2)->x(t+dt)
   wgpost2: deposit charge density
   wacguard2: add current density guard cells
   waguard2: add charge density guard cells

Field solve section:
   wfft2r: FFT charge density to fourier space
   w3fft2r: FFT current density to fourier space
   wcuperp2: take transverse part of current
   wibpois2: calculate initial magnetic field in fourier space
   wmaxwel2: update transverse electromagnetic fields in fourier space
   wpois2: calculate smoothed longitudinal electric field in fourier
           space.
   wemfield2: add smoothed longitudinal and transverse electric fields
   wemfield2: copy smoothed magnetic field
   w3fft2r: FFT smoothed electric field to real space
   w3fft2r: FFT smoothed magnetic field to real space

Particle Push section:
   wcbguard2l): fill in guard cells for smoothed electric field
   wcbguard2l: fill in guard cells for smoothed magnetic field
   wgrbpush2: update relativistic particle co-ordinates with smoothed
              electric and magnetic fields:
              x(t)->x(t+dt/2); v(t-dt/2)->v(t+dt/2)
   wgbpush2: update particle co-ordinates with smoothed electric and
              magnetic fields: x(t)->x(t+dt/2); v(t-dt/2)->v(t+dt/2)
   wdsortp2yl : sort particles by cell
   
Alternate relativistic pushers, controlled by kpush flag:
   wagrbpush2: Analytic Boris Pusher
   weagrbpush2; Exact Analytic Pusher
Alternate non-relativistic pushers:
   wagbpush22: Analytic Boris Pusher

The inputs to the code are the grid parameters indx, indy, the particle
number parameters npx, npy, the time parameters tend, dt, and the
velocity paramters vtx, vty, vtz, vx0, vy0, vz0, the inverse speed of
light ci, the flags relativity and kpush, and the sorting parameter
sortime.

In more detail:
indx = exponent which determines length in x direction, nx=2**indx.
indy = exponent which determines length in y direction, ny=2**indy.
   These ensure the system lengths are a power of 2.
npx = number of electrons distributed in x direction.
npy = number of electrons distributed in y direction.
   The total number of particles in the simulation is npx*npy.
tend = time at end of simulation, in units of plasma frequency.
dt = time interval between successive calculations.
   The number of time steps the code runs is given by tend/dt.
   dt should be less than .45*ci for the electromagnetic code.
vtx/vty/vtz = thermal velocity of electrons in x/y/z direction.
   a typical value is 1.0.
vx0/vy0/vz0 = drift velocity of electrons in x/y/z direction.
ci = reciprocal of velocity of light
relativity = (no,yes) = (0,1) = relativity is used
kpush = push type = (1,2,3) = (Boris,Analytic Boris,Exact Analytic)
sortime = number of time steps between electron sorting.
   This is used to improve cache performance.  sortime=0 to suppress.

The major program files contained here include:
bpic2.f90     Fortran90 main program 
bpush2.f      Fortran77 procedure library
bpush2_h.f90  Fortran90 procedure interface (header) library
wbpush2.f90   Fortran90 wrapper library
abpush2.f     Fortran77 library for analytic pushers
abpush2_h     Fortran90 interface (header) library for analytic pushers
wabpush2.f90  Fortran90 wrapper library for analytic pushers
dtimer.c      C timer function, used by both C and Fortran

Files with the suffix .f90 adhere to the Fortran 90 standard, files with
the suffix .f adhere to the Fortran77 standard.

The makefile is setup to use gcc and gfortran with Linux.

One executable can be created, bpic2 for Fortran

To compile the program, execute:

make

To execute, type the executable:

./bpic2

To compile the Python library, execute:

make python

To execute the Python program, execute:

python3 bpic2.py

The Python code and the Fortran code give about the same performance,
since the Fortran library is performing most of the work.

The file output contains the results produced for the default parameters.

The Fortran version can be compiled to run with double precision by
changing the Makefile (typically by setting the compiler options flags
-r8).
